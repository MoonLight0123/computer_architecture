#include "cache.h"

//uint32_t lfu[LLC_SET][LLC_WAY];
class cacheInfo
{
public:
    uint32_t freq;//频率 频率小的优先被替换出去
    uint32_t time;//freq相同的元素这一变量才有效  freq相同时time值大的的优先被替换
};

cacheInfo info[LLC_SET][LLC_WAY];
// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    cout << "Initialize mylfu state" << endl;

    for(int i=0;i<LLC_SET;i++)
    {
        for(int j=0;j<LLC_WAY;j++)
        {
            info[i][j].freq=0;
            info[i][j].time=0;
        }
    }
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    uint32_t way;
    for (way=0; way<LLC_WAY; way++) {
        //找到未被分配
        if (block[set][way].valid == false) {
            return way;
        }
    }
    int minFreq=0x3fffffff;
    int maxTime=-1;
    int ans;
    for(way=0;way<LLC_WAY;way++)
    {
        if(info[set][way].freq<minFreq)
        {
            minFreq=info[set][way].freq;
            ans=way;
            maxTime=info[set][way].time;
        }
        else if(info[set][way].freq==minFreq)
        {
            if(maxTime<info[set][way].time)
            {
                ans=way;
                maxTime=info[set][way].time;
            }
        }
    }
    return ans;
    // baseline LRU
    // 返回符合替换策略的 cacheline
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{//进行 cacheline 替换
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;
    // cout << hex << " paddr: " << setw(12) << paddr << " ip: " << setw(8) << ip << " victim_addr: " << victim_addr << dec << endl;

    // baseline LRU
    //if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
    //    return;
    if(hit)
    {
        info[set][way].freq++;
        for(int i=0;i<LLC_WAY;i++)
        {
            if(i==way)continue;
            if(info[set][i].freq==info[set][way].freq)
                info[set][i].time++;
        }
    }
    else
    {
        info[set][way].freq=1;
        info[set][way].time=0;
    }

}

void CACHE::llc_replacement_final_stats()
{

}

